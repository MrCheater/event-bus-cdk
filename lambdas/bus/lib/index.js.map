{"version":3,"sources":["../src/index.js"],"names":["handler","event","context","callbackWaitsForEmptyEventLoop","type","payload","subscriptionId","Error"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AACxCA,EAAAA,OAAO,CAACC,8BAAR,GAAyC,KAAzC;AACA,6BAAWD,OAAX;;AAEA,UAAQD,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AAAe;AACb,eAAO,wBAAP;AACD;;AACD,SAAK,MAAL;AAAa;AACX,eAAO,sBAAP;AACD;;AACD,SAAK,MAAL;AAAa;AACX,eAAO,wCAAiBH,KAAK,CAACI,OAAvB,CAAP;AACD;;AACD,SAAK,MAAL;AAAa;AACX,cAAM;AAAEC,UAAAA;AAAF,YAAqBL,KAAK,CAACI,OAAjC;AACA,eAAO,0CAAkBC,cAAlB,CAAP;AACD;;AACD,SAAK,gBAAL;AAAuB,OACtB;;AACD,SAAK,cAAL;AAAqB,OACpB;;AACD,SAAK,cAAL;AAAqB,OACpB;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,wBAAuBN,KAAK,CAACG,IAAK,EAA7C,CAAN;AACD;AAtBH;AAwBD,CA5BD;;eA8BeJ,O","sourcesContent":["import { pushNotification } from './pushNotification'\nimport { pullNotifications } from './pullNotifications'\nimport { create, drop } from './lifecycle'\nimport { updateEnvs } from './constants'\n\nconst handler = async (event, context) => {\n  context.callbackWaitsForEmptyEventLoop = false\n  updateEnvs(context)\n\n  switch (event.type) {\n    case 'create': {\n      return create()\n    }\n    case 'drop': {\n      return drop()\n    }\n    case 'push': {\n      return pushNotification(event.payload)\n    }\n    case 'pull': {\n      const { subscriptionId } = event.payload\n      return pullNotifications(subscriptionId)\n    }\n    case 'heartbeatBatch': {\n    }\n    case 'successBatch': {\n    }\n    case 'failureBatch': {\n    }\n    default: {\n      throw new Error(`Unknown event.type = ${event.type}`)\n    }\n  }\n}\n\nexport default handler\n"],"file":"index.js"}